#include "serialport.h"


const uint8_t auchCRCHi[]{
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

const uint8_t auchCRCLo[]{
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
    0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
    0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
    0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
    0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
    0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
    0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
    0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
    0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};



SerialPort::SerialPort(QObject *parent) : QObject(parent),
    m_SerialPort(new QSerialPort)
{
}
uint16_t SerialPort::CRC16(QByteArray m_ByteAarray, uint16_t ByteArraySize){
    uint8_t  uchCRCHi = 0xFF;
    uint8_t  uchCRCLo = 0xFF;
    uint16_t uIndex;
    uint8_t count_i=0;
    while (count_i < ByteArraySize)
    {
        uIndex = uchCRCLo ^ m_ByteAarray.at(count_i);
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
        uchCRCHi = auchCRCLo[uIndex];
        count_i++;
    }
    return(uchCRCHi <<8 | uchCRCLo);
}
bool SerialPort::CRC(QByteArray m_ByteArray){
    //CRC校验，正确返回true  错误范围false
    if(this->CRC16(m_ByteArray,14)==(m_ByteArray.at(14)<<8|m_ByteArray.at(15))){
        return true;
    }
    else return false;
}

bool SerialPort::IFOpen(){
    return this->m_SerialPort->isOpen();
}

void SerialPort::ReadBuffSlot(){
    //每次读取16byte 入 ReadBuf
    this->ReadBuf.push_back(m_SerialPort->read(16));
    QByteArray temp=ReadBuf.at(0);
    QByteArray CheckArray;
    this->FrameSum++;

    //转换为大端法存储
    for(int i=temp.size()-1;i>=0;i--){
        CheckArray.append(temp.at(i));
    }

    //检查帧头


    if(CheckArray.at(0)==this->FrameHead1 && CheckArray.at(1)==this->FrameHead2){
        //CRC校验,成功，则将点加入m_pointset
        if(CRC(CheckArray)){
            //读取点的信息
            char Type;
            int PanID;
            double Point_X;
            double Point_Y;

            if(CheckArray.at(4)==this->Type_B){
                Type='B';
            }
            else if(CheckArray.at(4)==this->Type_T){
                Type='T';
            }
            PanID=(int)(CheckArray.at(2)<<8|CheckArray.at(3));
            Point_X=(double)(CheckArray.at(5)<<8|CheckArray.at(6));
            Point_Y=(double)(CheckArray.at(7)<<8|CheckArray.at(8));
            this->m_PointSet.addPoint(Type,PanID,QPointF(Point_X,Point_Y));
        }
        else {
            this->ErrorFrame++;
        }
    }
    else {
        this->ErrorFrame++;
    }
    this->ReadBuf.pop_front();
}
PointSet SerialPort::GetPointSet(){
    PointSet res;
    res=this->m_PointSet;
    return res;
}


//设置串口BCD，由串口类调用
//每次转换串口时，都需要先关闭串口，调用该函数之后，才能重新打开
void SerialPort::SetBCD(QString PortName, QVector<int>& bcd){
    this->m_SerialPort->setPortName(PortName);
    int m_BaudRate=bcd.at(0);
    int m_Parity=bcd.at(1);
    int m_DataBit=bcd.at(2);
    int m_StopBot=bcd.at(3);
    switch (m_BaudRate){
    case 1200:
        this->m_SerialPort->setBaudRate(QSerialPort::Baud1200);
        break;
    case 2400:
        this->m_SerialPort->setBaudRate(QSerialPort::Baud2400);
        break;
    case 4800:
        this->m_SerialPort->setBaudRate(QSerialPort::Baud4800);
        break;
    case 9600:
        this->m_SerialPort->setBaudRate(QSerialPort::Baud9600);
        break;
    case 19200:
        this->m_SerialPort->setBaudRate(QSerialPort::Baud19200);
        break;
    case 38400:
        this->m_SerialPort->setBaudRate(QSerialPort::Baud38400);
        break;
    }

    switch (m_Parity){
    case 0:
        this->m_SerialPort->setParity(QSerialPort::NoParity);
        break;
    case 1:
        this->m_SerialPort->setParity(QSerialPort::OddParity);
        break;
    case 2:
        this->m_SerialPort->setParity(QSerialPort::EvenParity);
        break;
    }

    switch (m_DataBit) {
    case 5:
        this->m_SerialPort->setDataBits(QSerialPort::Data5);
        break;
    case 6:
        this->m_SerialPort->setDataBits(QSerialPort::Data6);
        break;
    case 7:
        this->m_SerialPort->setDataBits(QSerialPort::Data7);
        break;
    case 8:
        this->m_SerialPort->setDataBits(QSerialPort::Data8);
        break;
    }

    switch (m_StopBot){
    case 0:
        this->m_SerialPort->setStopBits(QSerialPort::OneStop);
        break;
    case 1:
        this->m_SerialPort->setStopBits(QSerialPort::OneAndHalfStop);
        break;
    case 2:
        this->m_SerialPort->setStopBits(QSerialPort::TwoStop);
        break;
    }

}

//开启同时可读写串口
void SerialPort::OpenPortSlot(){
    this->m_SerialPort->open(QIODevice::ReadWrite);
}

//关闭串口
void SerialPort::ClosePortSlot(){
    this->m_SerialPort->clear();
    this->m_SerialPort->close();
}

SerialPort::~SerialPort(){
    delete m_SerialPort;
    ReadBuf.clear();
}
